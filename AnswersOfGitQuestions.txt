1- Git nedir?

Projelerin geçmişini, yapılan değişiklikleri ve farklı versiyonlarını takip etme olanağı sunan bir Versiyon Kontrol Sistemidir(VCS). Git, bireysel  veya bir ekip içinde çalışırken kod yönetimini kolaylaştırır, takım üyeleri arasında işbirliği yapmayı ve projenin gelişimini izlemeyi sağlar.
#####


2- "git pull" ile "git fetch" komutlarının farkı nedir?

git fetch komutunu kullanırsak uzak repodaki son değişikliklerden "sadece haberdar oluruz" yerel ropomuzda bir değişiklik olmaz. Eğer git pull komutunu kullanırsak, bu kez uzak repodaki değişiklikleri kendi yerel repomuza çekerek uzaktaki değişikliklere sahip olabiliriz.
#####


3- Eğer takım arkadaşımız "kodlarımı gönderdim, benim geliştirmemin üzerine devam et" derse ve gönderdiği kodları "git pull" ile lokalimize alamıyorsak nerelerde hata yapılmış olabilir?

Eğer herhangi bir teknik sorun olmamışsa (internet erişimi vb), Öncelikle git fetch ile değişiklik var mı kontrol ettiğimizden emin olduktan sonra hala değişiklikleri göremiyorsak iki farklı sebebi olabilir.

Arkadaşımız değişiklikleri commitlediği halde henüz uzak repoya push etmemiş olabilir. Eğer push işlemi gerçekleşmişse ancak sorun devam ediyorsa, muhtemelen farklı bir branch üzerine push yapmış olabilir.
#####


4- "git fetch origin" komutundaki "origin" neye karşılık gelmektedir?

Uzak repoyu temsil eder. Biz yukarıdaki komut ile uzak repomuzda varsa değişiklikleri görebiliriz.
#####


5- "HEAD" kelimesi neyi temsil etmektedir?

Üzerinde çalıştığımız son commiti temsil eder. Farklı bi branche veya commite geçersek HEAD de güncellenir.
#####


6- "Staging Area" ya da "Index" diye isimlendirilen bölge tam olarak ne demektir?

Git'in çalışma alanındaki değişikliklerin geçici olarak saklandığı ve bir sonraki commit'e eklemek üzere hazırlandığı bir ara bölgedir. Bu bölge, değişiklikleri commit etmeden önce bir tür "geçiş alanı" olarak kullanılır. Yani, dosyalar üzerinde yapılan değişiklikler önce bu alana eklenir (staged), ardından bu staged dosyaları bir sonraki commit ile birlikte kaydedilebilir.
#####


7- "Untracked file" ne demektir?

"Untracked file" (İzlenmeyen dosya), Git'in takip etmediği, yani versiyon kontrolü altına almadığı dosyaları ifade eder. Bu dosyalar, genellikle proje klasöründe bulunabilir,
#####


8- ".git" klasörünü silersek ne olur?

Git reposu ve tarihçesi kaybolur, ve bu dizindeki tüm dosyalar yalnızca basit bir dosya dizini olur. Yani, .git klasörünü silmek, o dizini artık bir Git deposu olarak tanımlamaktan çıkarır ve tarihçe, dal bilgileri, commit bilgileri gibi Git özellikleri kaybolur.
#####

9- Kendi lokalimizde her "git init" komutunu kullanıdığımızda otomatik olarak "ReadMe.md" dosyası oluşturulmasını istiyorsak ne yapmalıyız?


Bunu iki farklı şekilde yapabiliriz

ilk yöntemde git template kullanmak

1- Şablon dizinini oluştur
mkdir -p ~/.git-templates/init

2- ReadMe.md dosyasını oluştur
echo "# My Project" > ~/.git-templates/init/ReadMe.md

3- Git konfigürasyonunu güncelle
git config --global init.templatedir '~/.git-templates'

İkinci yöntem ise Alias kullanmak

.bashrc veya .zshrc dosyalarına aşağıdaki satırı ekleyerek bir alias tanımlayabiliriz.
alias gitinit='git init && echo "# My Project" > ReadMe.md && git add ReadMe.md && git commit -m "Initial commit with ReadMe.md"'
#####


10- Git konusunda bahsi geçen "branch" yapısı nedir? Bize ne sağlar?

Bir proje üzerinde bağımsız çalışma alanı sunar kısaca bir çok çalışma arkadaşımızla aynı projenin farklı alanlarında daha rahat bir çalışma imkanı sağlar.
#####


11- Sıfırdan bir "branch" nasıl oluşturabiliriz?

> git branch new-branch
#####

13- "git clone" komutunu kullanırken belirli bir spesifik branch'i sadece çekmek istiyorsak nasıl yapabiliriz?

> git clone --branch branch-name URL
#####


14- "Merge conflict" ne demektir?

Aynı dosyanın aynı yerinde değişiklik yapılmışsa ve Git yapılan bu değişiklikleri otomatik olarak birleştiremezse conflict(çakışma) olur. ve git bize yapılan değişikliği birleştiremediğini bu hatayı göstererek bildirir.
#####


15- "git log" komutu ile hangi bilgileri görebiliriz?

Commit sahibini, commit geçmişini, commitin tarihini, commit mesajını ve commit hashlerini((SHA)) görebiliriz.
#####


16- "git diff" ile kaç farklı iki durumun arasındaki değişiklikleri görebiliriz?

* Çalışma dizini ile staging area arasındaki değişikliği,
* staging area ve son commit arasındaki değişikliği,
* iki farklı commit arasındaki değişikliği,
* iki farklı branch arasındaki değişikliği,
* çalışma dizini ve commit arasındaki değişikliği,
* spesifik bir dosya veya dizin yolu arasındaki değişikliği,
* iki farklı branchteki dosya veya dizin arasındaki değişikliği
#####


17- Git reset ile neyi geri alıyoruz?

 yaptığımız son commiti geri alıyoruz. Git reset komutu localde yaptığımız hiç bir değişikliği geri almaz.
#####


18- "git commit" ile "git push" arasındaki fark nedir?

"git commit" yaptığımız değişiklikleri local repoya kaydederiz ve "git push" ile de oluşturduğumuz bu commitleri repoya yükleriz.
#####


19- Atomic commit ne demektir?

Yapılan değişikliklerde her iş parçacığının tek tek commitlenmesidir. Böylece görev takibini yada varsa bir hatanın nerede meydana geldiğini görmemizi kolaylaşır.
#####


20- Repository ne demektir?

Kısaca repo olarak adlandırdığımız repository; bir projenin tüm dosyalarını, dosyalar üzerinde değişiklik yapabilen geliştiricileri, projenin geçmişi gibi bilgileri içeren bir depodur.
#####


21- "git tag" nedir? "git branch"’ten farkı nedir?

* Branch'ler projenin farklı geliştirme alanlarını temsil eder. Yeni bir branch oluşturarak, mevcut çalışma alanından bağımsız bir geliştirme alanı oluşturabiliriz. Buradaki amacımız yaptığımmız değişiklikleri tamamlayana kadar başka alanları etkilememek ve etkilenmemek.

* Git tag ise belirli commitleri işaretlemek için kullanırız. Çoğu zaman projenin sürümünü işaretlemek için kullanırız.

Farklar:

"git tag", belirli bir commit'e etiket eklemek için kullanılırken,
"git branch", projenin farklı geliştirme hatlarını temsil eden dalları oluşturmak, değiştirmek veya görmek için kullanılır.
#####


22 - Git'i görsel olarak kullanabilmek için hangi üçüncü taraf araçları ve uygulamaları kullanabiliriz?

* Sourcetree https://www.sourcetreeapp.com/ tamamen ücretsiz destek sunar.
* Gitkraken https://www.gitkraken.com/ bazı kısımlardarında ücretli destek sunmaktadır.
#####


23- "GitHub" ile "git" arasındaki fark nedir? GitHub benzeri diğer siteler nelerdir? GitHub veya diğer sitelerdeki kullanıcı adlarını yazar mısınız?

Git bir versiyon kontrol sistemidir. Github ise git'in komutlarını kullanarak projelerimizi depoladığımız ve yönetildiğimiz bir sistemdir.

- GitLab
- Bitbucket
#####


24- main ya da master branch'inin diğer branchlerden farkı nedir?

"main" veya "master" branch'i, genellikle projenin ana ve stabil geliştirme hattını temsil eder. Production için kullanılan stabil kod burada bulunur ve diğer branch'lerden gelen değişiklikler main yada master brunch'e entegre edilir.
#####


25- ".gitignore" dosyası nedir ve ne amaçla kullanılır?

Projemizde takip edilmemesi gereken dosyaların ve dizinlerin listesini içeren bir konfigürasyon dosyasıdır.
#####


26- "git push origin --delete branch_name” nedir ve ne için kullanılır?

remotte’a oluşturmuş olduğumuz branch’i siler local’de de oluşturmuş olduğun branch etkilenmez.
#####
